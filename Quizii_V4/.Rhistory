for (i in 1:timeserieslength) {
m <- x
derivatives <- eqs(m)
xk1 <- derivatives
m <- x+(.5*h*xk1)
derivatives <- eqs(m)
xk2 <- derivatives
m <- x+(.5*h*xk2)
derivatives <- eqs(m)
xk3 <- derivatives
m <- x + h*xk3
derivatives <- eqs(m)
xk4 <- derivatives
xNEW <- x+((h/6)*(xk1 + (2*xk2) + (2*xk3) + xk4));
# Now we need to collect our computed values.
xe <- rbind(xe,x)
# Now we assign the new variable values to the current values to do the next RK4 iteration.
x <- xNEW
}
# We are done with the Runge-Kutta.
cxe <- cbind(xe,c(1:nrow(xe))) # Adding a counting variable to the data matrix
# cxe
# Now we plot the Lorenz attractor.
# First we get the endpoint coordinates for the axes.
x1max <- max(cxe[,1]);x1min <- min(cxe[,1])
x2max <- max(cxe[,2]);x2min <- min(cxe[,2])
x3max <- max(cxe[,3]);x3min <- min(cxe[,3])
origin <- cbind(x1min,x2min,x3min,timeserieslength+2)
x1next <- cbind(x1max,x2min,x3min,timeserieslength+3)
x2next <- cbind(x1min,x2max,x3min,timeserieslength+4)
x3next <- cbind(x1min,x2min,x3max,timeserieslength+5)
# We are done getting the endpoint coordinates for the axes.
final <- cbind(NA,NA,NA,timeserieslength+1) #To break the plotting of axis lines from the other data
# Now we bind the axes coordinates to the original data matrix
axes <- rbind(origin,rbind(x1next,rbind(origin,rbind(x2next,(rbind(origin,rbind(x3next,final)))))))
trajects <- rbind(axes,cxe)
# trajects
# Translating a 3-D projection onto a 2-D plot
angle <- 2*pi/3
xvalue <- trajects[,1] - ((cos(angle))*trajects[,3])
yvalue <- trajects[,2] - ((sin(angle))*trajects[,3])
# The final plot statement for display
plot(xvalue, yvalue, axes=FALSE, xlab="", ylab="", type="l", lwd=2)
# A pdf version of the plot saved to the R workspace
savePlot(filename = "Lorenz",
type = "pdf")
# Now a 3-D display of the attractor that is rotatable
library(rgl)
plot3d(cxe,lwd=4,type="l",col=rainbow(1000))
sd(c(5,5,12))
which.min(c(4,1,6))
sd(c(5,8,12))
<<voortgang, echo=FALSE, warning=FALSE, message=FALSE, results='hold'>>=
)
overzicht <- as.data.frame(voortgang)
overzicht <- table(voortgang$Volledige.naam.student.,voortgang$Kwaliteit.input)
install.packages("slidify")
install.packages("rchart")
require(devtools)
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
install(devtools)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
library(devtools)
install.packages("devtools")
install.packages(c("cluster", "effects", "evaluate", "fAssets", "gdata", "Hmisc", "httpuv", "ipred", "KernSmooth", "lattice", "lmtest", "maptools", "markdown", "Matrix", "mnormt", "multcomp", "mvtnorm", "network", "nnet", "prodlim", "qcc", "raster", "rgdal", "rgl", "RGtk2", "robustbase", "rpart", "RQDA", "RTextTools", "shiny", "slam", "sp", "spam", "survival", "tau", "TH.data", "tree", "XLConnect", "xtable"))
install.packages(c("cluster", "effects", "evaluate", "fAssets",
install.packages(c("cluster", "effects", "evaluate", "fAssets", "gdata", "Hmisc", "httpuv", "ipred", "KernSmooth", "lattice", "lmtest", "maptools", "markdown", "Matrix", "mnormt", "multcomp", "mvtnorm", "network", "nnet", "prodlim", "qcc", "raster", "rgdal", "rgl", "RGtk2", "robustbase", "rpart", "RQDA", "RTextTools", "shiny", "slam", "sp", "spam", "survival", "tau", "TH.data", "tree", "XLConnect", "xtable"))
install.packages(c("cluster", "effects", "evaluate", "fAssets",
install.packages("devtools")
install.packages("C:/Users/NB/Downloads/devtools_1.5.zip", repos = NULL)
library(devtools)
install_github('rCharts', 'ramnathv')
install.packages("C:/Users/NB/Downloads/devtools_1.5.zip", repos = NULL)
require(devtools)
install.packages("devtools")
install.packages("fPortfolio")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("knitr")
install.packages("xtable")
install.packages("reshape2")
install.packages("tm")
install.packages("SnowballC")
install.packages("ggplot2")
install.packages("tables")
install.packages("RgoogleMaps")
auth = getGoogleAuth("wfth1969@gmail.com", mila1999)
library(rgoogledocs)
auth = getGoogleAuth("wfth1969@gmail.com", mila1999)
install.packages("C:/Users/NB/Downloads/RGoogleDocs_0.7-0.tar.gz", repos = NULL, type = "source")
library(rgoogledocs)
library(RGoogleDocs)
install.packages("C:/Users/NB/Downloads/RGoogleDocs_0.7-0.tar.gz", repos = NULL, type = "source")
install.packages("rgoogledata")
install.packages("C:/Users/NB/Downloads/RWordPress_0.2-3.tar.gz", repos = NULL, type = "source")
install.packages("gWidgetsWWW")
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
library(gWidgetWWW)
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
library(gWidgetsWWW)
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
library(gWidgetsWWW)
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
library(gWidgetsWWW)
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
library(gWidgetsWWW)
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
library(gWidgetsWWW)
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
gw_browseEnv()
install.packages("RTextTools")
gw_browseEnv()
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(...) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
install.packages("C:/Users/NB/Downloads/canvas_0.3-0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/NB/Downloads/canvas_0.3-0.zip", repos = NULL)
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(...) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(...) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
install.packages("C:/Users/NB/Downloads/canvas_0.3-0 (1).zip", repos = NULL)
install.packages('canvas',,'http://www.rforge.net/'
install.packages('canvas',,'http://www.rforge.net/')
install.packages('canvas',,'http://www.rforge.net/')
install.packages("C:/Users/NB/Downloads/canvas_0.3-0.zip", repos = NULL)
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(...) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(....) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(....) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(...) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
plotIt()
canvas(f, width = width, height = height)
install.packages("knitr")
library(gWidgetsWWW)
localServerOpen('Examples/ex-simple-gui.R', package='gWidgetsWWW')
library(gWidgetsWWW)
localServerOpen('Examples/ex-simple-gui.R', package='gWidgetsWWW')
install.packages("exams")
install.packages("RSVGTipsDevice")
install.packages("C:/Users/NB/Downloads/exams_1.9-6.zip", repos = NULL)
install.packages(RSVGTipsDevice)
install.packages(RSVGTipsDevice, "http://cran.us.r-project.org")
install.packages(RSVGTipsDevice, repos="http://cran.us.r-project.org")
install.packages(RSVGTipsDevice, repos = getOption("http://cran.us.r-project.org"))
library("exams")
exams2pdf("tstat.Rnw")
library("exams")
exams2pdf("tstat.Rnw")
exams2html("tstat.Rnw")
install.packages("tth")
library("exams")
exams2pdf("tstat.Rnw")
exams2html("tstat.Rnw")
install.packages("base64enc")
library("exams")
exams2pdf("tstat.Rnw")
exams2html("tstat.Rnw")
install.packages("shiny")
set.seed(10)
x <- rnorm(100)
x <- as.ts(x)
plot(x)
?textInput()
?textInput
??textInput
install.packages("C:/Users/NB/Downloads/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
library('RTools')
install.packages("Rtools")
install.packages(“RMySQL”, type = “source”)
install.packages('RMySQL', type = 'source')
install.packages('RMySQL', type = 'source')
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = 'source')
session <- reactive({c('a', 'b', 'c')})
observe({write.csv(session, file='sessions.csv')})
session <- c('a', 'b', 'c')
write.csv(session, file='sessions.csv')
setwd("~/GitHub/Quizii/Quizii_V4")
session <- c('a', 'b', 'c')
write.csv(session, file='sessions.csv')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/Quizii/Quizii_V4")
?flushReact()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
session
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
sys.time
sys.time()
Sys.time()
shiny::runApp()
